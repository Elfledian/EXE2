// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repo.Data;

#nullable disable

namespace Repo.Migrations
{
    [DbContext(typeof(TheShineDbContext))]
    [Migration("20250603075145_inti")]
    partial class inti
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("JobTag", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("char(36)")
                        .HasColumnName("job_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tag_id");

                    b.HasKey("JobId", "TagId")
                        .HasName("PK__job_tags__1A1BDC8E5B68F0DB");

                    b.HasIndex("TagId");

                    b.HasIndex(new[] { "JobId" }, "idx_job_tags_job_id");

                    b.ToTable("job_tags", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Repo.Entities.Application", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("application_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("About")
                        .HasColumnType("longtext")
                        .HasColumnName("about");

                    b.Property<string>("AboutMe")
                        .HasColumnType("longtext")
                        .HasColumnName("about_me");

                    b.Property<DateTime?>("AppliedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("applied_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("char(36)")
                        .HasColumnName("candidate_id");

                    b.Property<string>("InterviewType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("interview_type");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("char(36)")
                        .HasColumnName("job_id");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Applied")
                        .HasColumnName("status");

                    b.HasKey("ApplicationId")
                        .HasName("PK__applicat__3BCBDCF27B586E0C");

                    b.HasIndex(new[] { "CandidateId" }, "idx_applications_candidate_id");

                    b.HasIndex(new[] { "JobId" }, "idx_applications_job_id");

                    b.ToTable("applications");
                });

            modelBuilder.Entity("Repo.Entities.Candidate", b =>
                {
                    b.Property<Guid>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("candidate_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Education")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("education");

                    b.Property<bool?>("Featured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("featured");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("gender");

                    b.Property<string>("IncomeRange")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("1-3M")
                        .HasColumnName("income_range");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Chua nh?n vi?c")
                        .HasColumnName("status");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<bool?>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("verified");

                    b.HasKey("CandidateId")
                        .HasName("PK__candidat__39BD4C18354A8933");

                    b.HasIndex(new[] { "UserId" }, "UQ__candidat__B9BE370E1C8D5C72")
                        .IsUnique();

                    b.ToTable("candidates");
                });

            modelBuilder.Entity("Repo.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("category_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("SubItems")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("sub_items");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("CategoryId")
                        .HasName("PK__categori__D54EE9B4DDD25EB7");

                    b.HasIndex(new[] { "Title" }, "idx_categories_title");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Repo.Entities.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("company_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("company_name");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("LogoFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("logo_file_id");

                    b.Property<Guid?>("RecruiterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("recruiter_id");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("website");

                    b.HasKey("CompanyId")
                        .HasName("PK__companie__3E267235299690E3");

                    b.HasIndex("LogoFileId");

                    b.HasIndex(new[] { "RecruiterId" }, "UQ__companie__42ABA25659E2F898")
                        .IsUnique();

                    b.ToTable("companies");
                });

            modelBuilder.Entity("Repo.Entities.CvDetail", b =>
                {
                    b.Property<Guid>("CvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("cv_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("char(36)")
                        .HasColumnName("candidate_id");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("contact_phone");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("DesiredSalary")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("desired_salary");

                    b.Property<string>("Education")
                        .HasColumnType("longtext")
                        .HasColumnName("education");

                    b.Property<string>("Experience")
                        .HasColumnType("longtext")
                        .HasColumnName("experience");

                    b.Property<string>("Field")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("field");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("Languages")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("languages");

                    b.Property<string>("PortfolioUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("portfolio_url");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("position");

                    b.Property<string>("Skills")
                        .HasColumnType("longtext")
                        .HasColumnName("skills");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CvId")
                        .HasName("PK__cv_detai__C36883E6681921B8");

                    b.HasIndex(new[] { "CandidateId" }, "idx_cv_details_candidate_id");

                    b.ToTable("cv_details");
                });

            modelBuilder.Entity("Repo.Entities.File", b =>
                {
                    b.Property<Guid>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("file_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("char(36)")
                        .HasColumnName("candidate_id");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("content_type");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("longblob")
                        .HasColumnName("file_data");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("file_type");

                    b.Property<DateTime?>("UploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("upload_date")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("FileId")
                        .HasName("PK__files__07D884C68CA1CF9F");

                    b.HasIndex(new[] { "CandidateId" }, "idx_files_candidate_id");

                    b.ToTable("files");
                });

            modelBuilder.Entity("Repo.Entities.Invitation", b =>
                {
                    b.Property<Guid>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("invitation_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("char(36)")
                        .HasColumnName("candidate_id");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("char(36)")
                        .HasColumnName("job_id");

                    b.Property<string>("Message")
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.Property<Guid?>("RecruiterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("recruiter_id");

                    b.Property<DateTime?>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("sent_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.HasKey("InvitationId")
                        .HasName("PK__invitati__94B74D7C19DB176C");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("invitations");
                });

            modelBuilder.Entity("Repo.Entities.Job", b =>
                {
                    b.Property<Guid>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("job_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Benefits")
                        .HasColumnType("longtext")
                        .HasColumnName("benefits");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("category_id");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("company_id");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("company_name");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("contact_phone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Duration")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("duration");

                    b.Property<string>("Experience")
                        .HasColumnType("longtext")
                        .HasColumnName("experience");

                    b.Property<bool?>("IsUrgent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_urgent");

                    b.Property<string>("JobDetails")
                        .HasColumnType("longtext")
                        .HasColumnName("job_details");

                    b.Property<string>("Location")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("Ho Chi Minh City")
                        .HasColumnName("location");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("position");

                    b.Property<DateTime?>("PostedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("posted_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("RecruiterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("recruiter_id");

                    b.Property<string>("Requirements")
                        .HasColumnType("longtext")
                        .HasColumnName("requirements");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("salary");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Open")
                        .HasColumnName("status");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("subscription_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("JobId")
                        .HasName("PK__jobs__6E32B6A5C5F2B37E");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex(new[] { "RecruiterId" }, "idx_jobs_recruiter_id");

                    b.ToTable("jobs");
                });

            modelBuilder.Entity("Repo.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("notification_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("PK__notifica__E059842F6357338B");

                    b.HasIndex(new[] { "UserId" }, "idx_notifications_user_id");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("Repo.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("payment_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("application_id");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime")
                        .HasColumnName("paid_at");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("transaction_id");

                    b.HasKey("PaymentId")
                        .HasName("PK__payments__ED1FC9EAC80CA886");

                    b.HasIndex(new[] { "ApplicationId" }, "UQ__payments__3BCBDCF3629EA847")
                        .IsUnique();

                    b.ToTable("payments");
                });

            modelBuilder.Entity("Repo.Entities.Rating", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("rating_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<string>("ContributedComment")
                        .HasColumnType("longtext")
                        .HasColumnName("contributed_comment");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Rating1")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("reviewer_id");

                    b.HasKey("RatingId")
                        .HasName("PK__ratings__D35B278B9864B1A5");

                    b.HasIndex(new[] { "ReviewerId" }, "idx_ratings_reviewer_id");

                    b.ToTable("ratings");
                });

            modelBuilder.Entity("Repo.Entities.Recruiter", b =>
                {
                    b.Property<Guid>("RecruiterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("recruiter_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CompanyType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company_type");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("contact_phone");

                    b.Property<string>("Scale")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("scale");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<bool?>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("verified");

                    b.HasKey("RecruiterId")
                        .HasName("PK__recruite__42ABA257E9F06E1E");

                    b.HasIndex(new[] { "UserId" }, "UQ__recruite__B9BE370E94EF86F8")
                        .IsUnique();

                    b.ToTable("recruiters");
                });

            modelBuilder.Entity("Repo.Entities.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("subscription_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("CandidatesManagement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("candidates_management");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int")
                        .HasColumnName("duration_days");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<string>("Features")
                        .HasColumnType("longtext")
                        .HasColumnName("features");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("original_price");

                    b.Property<string>("Plan")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("plan");

                    b.Property<int>("PostLimit")
                        .HasColumnType("int")
                        .HasColumnName("post_limit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<Guid?>("RecruiterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("recruiter_id");

                    b.Property<DateTime?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("subtitle");

                    b.Property<bool?>("UrgentHiring")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("urgent_hiring");

                    b.HasKey("SubscriptionId")
                        .HasName("PK__subscrip__863A7EC161176C70");

                    b.HasIndex("RecruiterId");

                    b.ToTable("subscriptions");
                });

            modelBuilder.Entity("Repo.Entities.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("tag_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("TagId")
                        .HasName("PK__tags__4296A2B61A399BE7");

                    b.HasIndex(new[] { "Name" }, "UQ__tags__72E12F1B77600626")
                        .IsUnique();

                    b.ToTable("tags");
                });

            modelBuilder.Entity("Repo.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("google_id");

                    b.Property<string>("Location")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("Ho Chi Minh City")
                        .HasColumnName("location");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RememberMe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("remember_me");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool?>("TermsAgreed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("terms_agreed");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id")
                        .HasName("PK__users__B9BE370FA57EB208");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex(new[] { "Email" }, "UQ__users__AB6E6164023178F8")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "UQ__users__B43B145FB0B35F61")
                        .IsUnique();

                    b.HasIndex(new[] { "GoogleId" }, "UQ__users__CCBDE7DC88483CA3")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Repo.Entities.Verification", b =>
                {
                    b.Property<Guid>("VerificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("verification_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("BlockchainHash")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("blockchain_hash");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("verified_at");

                    b.HasKey("VerificationId")
                        .HasName("PK__verifica__24F179694FEA4951");

                    b.HasIndex(new[] { "UserId" }, "UQ__verifica__B9BE370EE289CFF9")
                        .IsUnique();

                    b.ToTable("verifications");
                });

            modelBuilder.Entity("Repo.Entities.WorkHistory", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("history_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("char(36)")
                        .HasColumnName("candidate_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.HasKey("HistoryId")
                        .HasName("PK__work_his__096AA2E992B2BFDA");

                    b.HasIndex(new[] { "CandidateId" }, "idx_work_history_candidate_id");

                    b.ToTable("work_history");
                });

            modelBuilder.Entity("JobTag", b =>
                {
                    b.HasOne("Repo.Entities.Job", null)
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__job_tags__job_id__7A672E12");

                    b.HasOne("Repo.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__job_tags__tag_id__7B5B524B");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Repo.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Repo.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repo.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Repo.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repo.Entities.Application", b =>
                {
                    b.HasOne("Repo.Entities.Candidate", "Candidate")
                        .WithMany("Applications")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("FK__applicati__candi__03F0984C");

                    b.HasOne("Repo.Entities.Job", "Job")
                        .WithMany("Applications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__applicati__job_i__02FC7413");

                    b.Navigation("Candidate");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Repo.Entities.Candidate", b =>
                {
                    b.HasOne("Repo.Entities.User", "User")
                        .WithOne("Candidate")
                        .HasForeignKey("Repo.Entities.Candidate", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__candidate__user___4CA06362");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repo.Entities.Company", b =>
                {
                    b.HasOne("Repo.Entities.File", "LogoFile")
                        .WithMany("Companies")
                        .HasForeignKey("LogoFileId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_companies_files");

                    b.HasOne("Repo.Entities.User", "Recruiter")
                        .WithOne("Company")
                        .HasForeignKey("Repo.Entities.Company", "RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__companies__recru__52593CB8");

                    b.Navigation("LogoFile");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("Repo.Entities.CvDetail", b =>
                {
                    b.HasOne("Repo.Entities.Candidate", "Candidate")
                        .WithMany("CvDetails")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__cv_detail__candi__31B762FC");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Repo.Entities.File", b =>
                {
                    b.HasOne("Repo.Entities.Candidate", "Candidate")
                        .WithMany("Files")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__files__candidate__2BFE89A6");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Repo.Entities.Invitation", b =>
                {
                    b.HasOne("Repo.Entities.Candidate", "Candidate")
                        .WithMany("Invitations")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("FK__invitatio__candi__0B91BA14");

                    b.HasOne("Repo.Entities.Job", "Job")
                        .WithMany("Invitations")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK__invitatio__job_i__0C85DE4D");

                    b.HasOne("Repo.Entities.Recruiter", "Recruiter")
                        .WithMany("Invitations")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__invitatio__recru__0A9D95DB");

                    b.Navigation("Candidate");

                    b.Navigation("Job");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("Repo.Entities.Job", b =>
                {
                    b.HasOne("Repo.Entities.Category", "Category")
                        .WithMany("Jobs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__jobs__category_i__778AC167");

                    b.HasOne("Repo.Entities.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK__jobs__company_id__75A278F5");

                    b.HasOne("Repo.Entities.Recruiter", "Recruiter")
                        .WithMany("Jobs")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__jobs__recruiter___74AE54BC");

                    b.HasOne("Repo.Entities.Subscription", "Subscription")
                        .WithMany("Jobs")
                        .HasForeignKey("SubscriptionId")
                        .HasConstraintName("FK__jobs__subscripti__76969D2E");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("Recruiter");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Repo.Entities.Notification", b =>
                {
                    b.HasOne("Repo.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__notificat__user___2645B050");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repo.Entities.Payment", b =>
                {
                    b.HasOne("Repo.Entities.Application", "Application")
                        .WithOne("Payment")
                        .HasForeignKey("Repo.Entities.Payment", "ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__payments__applic__1332DBDC");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Repo.Entities.Rating", b =>
                {
                    b.HasOne("Repo.Entities.User", "Reviewer")
                        .WithMany("Ratings")
                        .HasForeignKey("ReviewerId")
                        .HasConstraintName("FK__ratings__reviewe__18EBB532");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Repo.Entities.Recruiter", b =>
                {
                    b.HasOne("Repo.Entities.User", "User")
                        .WithOne("Recruiter")
                        .HasForeignKey("Repo.Entities.Recruiter", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__recruiter__user___59FA5E80");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repo.Entities.Subscription", b =>
                {
                    b.HasOne("Repo.Entities.Recruiter", "Recruiter")
                        .WithMany("Subscriptions")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__subscript__recru__6A30C649");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("Repo.Entities.Verification", b =>
                {
                    b.HasOne("Repo.Entities.User", "User")
                        .WithOne("Verification")
                        .HasForeignKey("Repo.Entities.Verification", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__verificat__user___1F98B2C1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repo.Entities.WorkHistory", b =>
                {
                    b.HasOne("Repo.Entities.Candidate", "Candidate")
                        .WithMany("WorkHistories")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__work_hist__candi__367C1819");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Repo.Entities.Application", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Repo.Entities.Candidate", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CvDetails");

                    b.Navigation("Files");

                    b.Navigation("Invitations");

                    b.Navigation("WorkHistories");
                });

            modelBuilder.Entity("Repo.Entities.Category", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Repo.Entities.Company", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Repo.Entities.File", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Repo.Entities.Job", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Invitations");
                });

            modelBuilder.Entity("Repo.Entities.Recruiter", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Jobs");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Repo.Entities.Subscription", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Repo.Entities.User", b =>
                {
                    b.Navigation("Candidate");

                    b.Navigation("Company");

                    b.Navigation("Notifications");

                    b.Navigation("Ratings");

                    b.Navigation("Recruiter");

                    b.Navigation("Verification");
                });
#pragma warning restore 612, 618
        }
    }
}
